// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osmformat.proto

#ifndef PROTOBUF_osmformat_2eproto__INCLUDED
#define PROTOBUF_osmformat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_osmformat_2eproto();
void protobuf_AssignDesc_osmformat_2eproto();
void protobuf_ShutdownFile_osmformat_2eproto();

class BBox;
class StringTable;
class Info;
class ChangeSet;
class Node;
class DenseNodes;
class Way;
class Relation;
class PrimitiveGroup;
class PrimitiveBlock;
class HeaderBlock;

enum Relation_MemberType {
  Relation_MemberType_NODE = 0,
  Relation_MemberType_WAY = 1,
  Relation_MemberType_RELATION = 2
};
bool Relation_MemberType_IsValid(int value);
const Relation_MemberType Relation_MemberType_MemberType_MIN = Relation_MemberType_NODE;
const Relation_MemberType Relation_MemberType_MemberType_MAX = Relation_MemberType_RELATION;
const int Relation_MemberType_MemberType_ARRAYSIZE = Relation_MemberType_MemberType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Relation_MemberType_descriptor();
inline const ::std::string& Relation_MemberType_Name(Relation_MemberType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Relation_MemberType_descriptor(), value);
}
inline bool Relation_MemberType_Parse(
    const ::std::string& name, Relation_MemberType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Relation_MemberType>(
    Relation_MemberType_descriptor(), name, value);
}
// ===================================================================

class BBox : public ::google::protobuf::Message {
 public:
  BBox();
  virtual ~BBox();
  
  BBox(const BBox& from);
  
  inline BBox& operator=(const BBox& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BBox& default_instance();
  
  void Swap(BBox* other);
  
  // implements Message ----------------------------------------------
  
  BBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BBox& from);
  void MergeFrom(const BBox& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint64 left = 1;
  inline bool has_left() const;
  inline void clear_left();
  static const int kLeftFieldNumber = 1;
  inline ::google::protobuf::int64 left() const;
  inline void set_left(::google::protobuf::int64 value);
  
  // required sint64 right = 2;
  inline bool has_right() const;
  inline void clear_right();
  static const int kRightFieldNumber = 2;
  inline ::google::protobuf::int64 right() const;
  inline void set_right(::google::protobuf::int64 value);
  
  // required sint64 top = 3;
  inline bool has_top() const;
  inline void clear_top();
  static const int kTopFieldNumber = 3;
  inline ::google::protobuf::int64 top() const;
  inline void set_top(::google::protobuf::int64 value);
  
  // required sint64 bottom = 4;
  inline bool has_bottom() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 4;
  inline ::google::protobuf::int64 bottom() const;
  inline void set_bottom(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:BBox)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 left_;
  ::google::protobuf::int64 right_;
  ::google::protobuf::int64 top_;
  ::google::protobuf::int64 bottom_;
  friend void  protobuf_AddDesc_osmformat_2eproto();
  friend void protobuf_AssignDesc_osmformat_2eproto();
  friend void protobuf_ShutdownFile_osmformat_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BBox* default_instance_;
};
// -------------------------------------------------------------------

class StringTable : public ::google::protobuf::Message {
 public:
  StringTable();
  virtual ~StringTable();
  
  StringTable(const StringTable& from);
  
  inline StringTable& operator=(const StringTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StringTable& default_instance();
  
  void Swap(StringTable* other);
  
  // implements Message ----------------------------------------------
  
  StringTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StringTable& from);
  void MergeFrom(const StringTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated bytes s = 1;
  inline int s_size() const;
  inline void clear_s();
  static const int kSFieldNumber = 1;
  inline const ::std::string& s(int index) const;
  inline ::std::string* mutable_s(int index);
  inline void set_s(int index, const ::std::string& value);
  inline void set_s(int index, const char* value);
  inline void set_s(int index, const void* value, size_t size);
  inline ::std::string* add_s();
  inline void add_s(const ::std::string& value);
  inline void add_s(const char* value);
  inline void add_s(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& s() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_s();
  
  // @@protoc_insertion_point(class_scope:StringTable)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> s_;
  friend void  protobuf_AddDesc_osmformat_2eproto();
  friend void protobuf_AssignDesc_osmformat_2eproto();
  friend void protobuf_ShutdownFile_osmformat_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StringTable* default_instance_;
};
// -------------------------------------------------------------------

class Info : public ::google::protobuf::Message {
 public:
  Info();
  virtual ~Info();
  
  Info(const Info& from);
  
  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Info& default_instance();
  
  void Swap(Info* other);
  
  // implements Message ----------------------------------------------
  
  Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Info& from);
  void MergeFrom(const Info& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 version = 1 [default = -1];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);
  
  // optional int32 timestamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);
  
  // optional int64 changeset = 3;
  inline bool has_changeset() const;
  inline void clear_changeset();
  static const int kChangesetFieldNumber = 3;
  inline ::google::protobuf::int64 changeset() const;
  inline void set_changeset(::google::protobuf::int64 value);
  
  // optional int32 uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);
  
  // optional int32 user_sid = 5;
  inline bool has_user_sid() const;
  inline void clear_user_sid();
  static const int kUserSidFieldNumber = 5;
  inline ::google::protobuf::int32 user_sid() const;
  inline void set_user_sid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Info)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::int64 changeset_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 user_sid_;
  friend void  protobuf_AddDesc_osmformat_2eproto();
  friend void protobuf_AssignDesc_osmformat_2eproto();
  friend void protobuf_ShutdownFile_osmformat_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Info* default_instance_;
};
// -------------------------------------------------------------------

class ChangeSet : public ::google::protobuf::Message {
 public:
  ChangeSet();
  virtual ~ChangeSet();
  
  ChangeSet(const ChangeSet& from);
  
  inline ChangeSet& operator=(const ChangeSet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeSet& default_instance();
  
  void Swap(ChangeSet* other);
  
  // implements Message ----------------------------------------------
  
  ChangeSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChangeSet& from);
  void MergeFrom(const ChangeSet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // repeated uint32 keys = 2 [packed = true];
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 2;
  inline ::google::protobuf::uint32 keys(int index) const;
  inline void set_keys(int index, ::google::protobuf::uint32 value);
  inline void add_keys(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      keys() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_keys();
  
  // repeated uint32 vals = 3 [packed = true];
  inline int vals_size() const;
  inline void clear_vals();
  static const int kValsFieldNumber = 3;
  inline ::google::protobuf::uint32 vals(int index) const;
  inline void set_vals(int index, ::google::protobuf::uint32 value);
  inline void add_vals(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vals() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vals();
  
  // optional .Info info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::Info& info() const;
  inline ::Info* mutable_info();
  
  // required int32 created_at = 8;
  inline bool has_created_at() const;
  inline void clear_created_at();
  static const int kCreatedAtFieldNumber = 8;
  inline ::google::protobuf::int32 created_at() const;
  inline void set_created_at(::google::protobuf::int32 value);
  
  // optional int32 closetime_delta = 9;
  inline bool has_closetime_delta() const;
  inline void clear_closetime_delta();
  static const int kClosetimeDeltaFieldNumber = 9;
  inline ::google::protobuf::int32 closetime_delta() const;
  inline void set_closetime_delta(::google::protobuf::int32 value);
  
  // required bool open = 10;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 10;
  inline bool open() const;
  inline void set_open(bool value);
  
  // optional .BBox bbox = 11;
  inline bool has_bbox() const;
  inline void clear_bbox();
  static const int kBboxFieldNumber = 11;
  inline const ::BBox& bbox() const;
  inline ::BBox* mutable_bbox();
  
  // @@protoc_insertion_point(class_scope:ChangeSet)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > keys_;
  mutable int _keys_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vals_;
  mutable int _vals_cached_byte_size_;
  ::Info* info_;
  ::google::protobuf::int32 created_at_;
  ::google::protobuf::int32 closetime_delta_;
  bool open_;
  ::BBox* bbox_;
  friend void  protobuf_AddDesc_osmformat_2eproto();
  friend void protobuf_AssignDesc_osmformat_2eproto();
  friend void protobuf_ShutdownFile_osmformat_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ChangeSet* default_instance_;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message {
 public:
  Node();
  virtual ~Node();
  
  Node(const Node& from);
  
  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();
  
  void Swap(Node* other);
  
  // implements Message ----------------------------------------------
  
  Node* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // repeated uint32 keys = 2 [packed = true];
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 2;
  inline ::google::protobuf::uint32 keys(int index) const;
  inline void set_keys(int index, ::google::protobuf::uint32 value);
  inline void add_keys(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      keys() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_keys();
  
  // repeated uint32 vals = 3 [packed = true];
  inline int vals_size() const;
  inline void clear_vals();
  static const int kValsFieldNumber = 3;
  inline ::google::protobuf::uint32 vals(int index) const;
  inline void set_vals(int index, ::google::protobuf::uint32 value);
  inline void add_vals(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vals() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vals();
  
  // optional .Info info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::Info& info() const;
  inline ::Info* mutable_info();
  
  // required sint64 lat = 8;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 8;
  inline ::google::protobuf::int64 lat() const;
  inline void set_lat(::google::protobuf::int64 value);
  
  // required sint64 lon = 9;
  inline bool has_lon() const;
  inline void clear_lon();
  static const int kLonFieldNumber = 9;
  inline ::google::protobuf::int64 lon() const;
  inline void set_lon(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Node)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > keys_;
  mutable int _keys_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vals_;
  mutable int _vals_cached_byte_size_;
  ::Info* info_;
  ::google::protobuf::int64 lat_;
  ::google::protobuf::int64 lon_;
  friend void  protobuf_AddDesc_osmformat_2eproto();
  friend void protobuf_AssignDesc_osmformat_2eproto();
  friend void protobuf_ShutdownFile_osmformat_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class DenseNodes : public ::google::protobuf::Message {
 public:
  DenseNodes();
  virtual ~DenseNodes();
  
  DenseNodes(const DenseNodes& from);
  
  inline DenseNodes& operator=(const DenseNodes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DenseNodes& default_instance();
  
  void Swap(DenseNodes* other);
  
  // implements Message ----------------------------------------------
  
  DenseNodes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DenseNodes& from);
  void MergeFrom(const DenseNodes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated sint64 id = 1 [packed = true];
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id(int index) const;
  inline void set_id(int index, ::google::protobuf::int64 value);
  inline void add_id(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_id();
  
  // repeated .Info info = 4;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::Info& info(int index) const;
  inline ::Info* mutable_info(int index);
  inline ::Info* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::Info >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::Info >*
      mutable_info();
  
  // repeated sint64 lat = 8 [packed = true];
  inline int lat_size() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 8;
  inline ::google::protobuf::int64 lat(int index) const;
  inline void set_lat(int index, ::google::protobuf::int64 value);
  inline void add_lat(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      lat() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_lat();
  
  // repeated sint64 lon = 9 [packed = true];
  inline int lon_size() const;
  inline void clear_lon();
  static const int kLonFieldNumber = 9;
  inline ::google::protobuf::int64 lon(int index) const;
  inline void set_lon(int index, ::google::protobuf::int64 value);
  inline void add_lon(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      lon() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_lon();
  
  // @@protoc_insertion_point(class_scope:DenseNodes)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > id_;
  mutable int _id_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::Info > info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > lat_;
  mutable int _lat_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > lon_;
  mutable int _lon_cached_byte_size_;
  friend void  protobuf_AddDesc_osmformat_2eproto();
  friend void protobuf_AssignDesc_osmformat_2eproto();
  friend void protobuf_ShutdownFile_osmformat_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DenseNodes* default_instance_;
};
// -------------------------------------------------------------------

class Way : public ::google::protobuf::Message {
 public:
  Way();
  virtual ~Way();
  
  Way(const Way& from);
  
  inline Way& operator=(const Way& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Way& default_instance();
  
  void Swap(Way* other);
  
  // implements Message ----------------------------------------------
  
  Way* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Way& from);
  void MergeFrom(const Way& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // repeated uint32 keys = 2 [packed = true];
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 2;
  inline ::google::protobuf::uint32 keys(int index) const;
  inline void set_keys(int index, ::google::protobuf::uint32 value);
  inline void add_keys(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      keys() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_keys();
  
  // repeated uint32 vals = 3 [packed = true];
  inline int vals_size() const;
  inline void clear_vals();
  static const int kValsFieldNumber = 3;
  inline ::google::protobuf::uint32 vals(int index) const;
  inline void set_vals(int index, ::google::protobuf::uint32 value);
  inline void add_vals(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vals() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vals();
  
  // optional .Info info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::Info& info() const;
  inline ::Info* mutable_info();
  
  // repeated sint64 refs = 8 [packed = true];
  inline int refs_size() const;
  inline void clear_refs();
  static const int kRefsFieldNumber = 8;
  inline ::google::protobuf::int64 refs(int index) const;
  inline void set_refs(int index, ::google::protobuf::int64 value);
  inline void add_refs(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      refs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_refs();
  
  // @@protoc_insertion_point(class_scope:Way)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > keys_;
  mutable int _keys_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vals_;
  mutable int _vals_cached_byte_size_;
  ::Info* info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > refs_;
  mutable int _refs_cached_byte_size_;
  friend void  protobuf_AddDesc_osmformat_2eproto();
  friend void protobuf_AssignDesc_osmformat_2eproto();
  friend void protobuf_ShutdownFile_osmformat_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Way* default_instance_;
};
// -------------------------------------------------------------------

class Relation : public ::google::protobuf::Message {
 public:
  Relation();
  virtual ~Relation();
  
  Relation(const Relation& from);
  
  inline Relation& operator=(const Relation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Relation& default_instance();
  
  void Swap(Relation* other);
  
  // implements Message ----------------------------------------------
  
  Relation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Relation& from);
  void MergeFrom(const Relation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Relation_MemberType MemberType;
  static const MemberType NODE = Relation_MemberType_NODE;
  static const MemberType WAY = Relation_MemberType_WAY;
  static const MemberType RELATION = Relation_MemberType_RELATION;
  static inline bool MemberType_IsValid(int value) {
    return Relation_MemberType_IsValid(value);
  }
  static const MemberType MemberType_MIN =
    Relation_MemberType_MemberType_MIN;
  static const MemberType MemberType_MAX =
    Relation_MemberType_MemberType_MAX;
  static const int MemberType_ARRAYSIZE =
    Relation_MemberType_MemberType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MemberType_descriptor() {
    return Relation_MemberType_descriptor();
  }
  static inline const ::std::string& MemberType_Name(MemberType value) {
    return Relation_MemberType_Name(value);
  }
  static inline bool MemberType_Parse(const ::std::string& name,
      MemberType* value) {
    return Relation_MemberType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // repeated uint32 keys = 2 [packed = true];
  inline int keys_size() const;
  inline void clear_keys();
  static const int kKeysFieldNumber = 2;
  inline ::google::protobuf::uint32 keys(int index) const;
  inline void set_keys(int index, ::google::protobuf::uint32 value);
  inline void add_keys(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      keys() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_keys();
  
  // repeated uint32 vals = 3 [packed = true];
  inline int vals_size() const;
  inline void clear_vals();
  static const int kValsFieldNumber = 3;
  inline ::google::protobuf::uint32 vals(int index) const;
  inline void set_vals(int index, ::google::protobuf::uint32 value);
  inline void add_vals(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vals() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vals();
  
  // optional .Info info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::Info& info() const;
  inline ::Info* mutable_info();
  
  // repeated int32 roles_sid = 8 [packed = true];
  inline int roles_sid_size() const;
  inline void clear_roles_sid();
  static const int kRolesSidFieldNumber = 8;
  inline ::google::protobuf::int32 roles_sid(int index) const;
  inline void set_roles_sid(int index, ::google::protobuf::int32 value);
  inline void add_roles_sid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      roles_sid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_roles_sid();
  
  // repeated sint64 memids = 9 [packed = true];
  inline int memids_size() const;
  inline void clear_memids();
  static const int kMemidsFieldNumber = 9;
  inline ::google::protobuf::int64 memids(int index) const;
  inline void set_memids(int index, ::google::protobuf::int64 value);
  inline void add_memids(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      memids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_memids();
  
  // repeated .Relation.MemberType types = 10 [packed = true];
  inline int types_size() const;
  inline void clear_types();
  static const int kTypesFieldNumber = 10;
  inline ::Relation_MemberType types(int index) const;
  inline void set_types(int index, ::Relation_MemberType value);
  inline void add_types(::Relation_MemberType value);
  inline const ::google::protobuf::RepeatedField<int>& types() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_types();
  
  // @@protoc_insertion_point(class_scope:Relation)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > keys_;
  mutable int _keys_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vals_;
  mutable int _vals_cached_byte_size_;
  ::Info* info_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > roles_sid_;
  mutable int _roles_sid_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > memids_;
  mutable int _memids_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> types_;
  mutable int _types_cached_byte_size_;
  friend void  protobuf_AddDesc_osmformat_2eproto();
  friend void protobuf_AssignDesc_osmformat_2eproto();
  friend void protobuf_ShutdownFile_osmformat_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Relation* default_instance_;
};
// -------------------------------------------------------------------

class PrimitiveGroup : public ::google::protobuf::Message {
 public:
  PrimitiveGroup();
  virtual ~PrimitiveGroup();
  
  PrimitiveGroup(const PrimitiveGroup& from);
  
  inline PrimitiveGroup& operator=(const PrimitiveGroup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrimitiveGroup& default_instance();
  
  void Swap(PrimitiveGroup* other);
  
  // implements Message ----------------------------------------------
  
  PrimitiveGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrimitiveGroup& from);
  void MergeFrom(const PrimitiveGroup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Node nodes = 1;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::Node& nodes(int index) const;
  inline ::Node* mutable_nodes(int index);
  inline ::Node* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::Node >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Node >*
      mutable_nodes();
  
  // optional .DenseNodes dense = 2;
  inline bool has_dense() const;
  inline void clear_dense();
  static const int kDenseFieldNumber = 2;
  inline const ::DenseNodes& dense() const;
  inline ::DenseNodes* mutable_dense();
  
  // repeated .Way ways = 3;
  inline int ways_size() const;
  inline void clear_ways();
  static const int kWaysFieldNumber = 3;
  inline const ::Way& ways(int index) const;
  inline ::Way* mutable_ways(int index);
  inline ::Way* add_ways();
  inline const ::google::protobuf::RepeatedPtrField< ::Way >&
      ways() const;
  inline ::google::protobuf::RepeatedPtrField< ::Way >*
      mutable_ways();
  
  // repeated .Relation relations = 4;
  inline int relations_size() const;
  inline void clear_relations();
  static const int kRelationsFieldNumber = 4;
  inline const ::Relation& relations(int index) const;
  inline ::Relation* mutable_relations(int index);
  inline ::Relation* add_relations();
  inline const ::google::protobuf::RepeatedPtrField< ::Relation >&
      relations() const;
  inline ::google::protobuf::RepeatedPtrField< ::Relation >*
      mutable_relations();
  
  // repeated .ChangeSet changesets = 5;
  inline int changesets_size() const;
  inline void clear_changesets();
  static const int kChangesetsFieldNumber = 5;
  inline const ::ChangeSet& changesets(int index) const;
  inline ::ChangeSet* mutable_changesets(int index);
  inline ::ChangeSet* add_changesets();
  inline const ::google::protobuf::RepeatedPtrField< ::ChangeSet >&
      changesets() const;
  inline ::google::protobuf::RepeatedPtrField< ::ChangeSet >*
      mutable_changesets();
  
  // @@protoc_insertion_point(class_scope:PrimitiveGroup)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::Node > nodes_;
  ::DenseNodes* dense_;
  ::google::protobuf::RepeatedPtrField< ::Way > ways_;
  ::google::protobuf::RepeatedPtrField< ::Relation > relations_;
  ::google::protobuf::RepeatedPtrField< ::ChangeSet > changesets_;
  friend void  protobuf_AddDesc_osmformat_2eproto();
  friend void protobuf_AssignDesc_osmformat_2eproto();
  friend void protobuf_ShutdownFile_osmformat_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PrimitiveGroup* default_instance_;
};
// -------------------------------------------------------------------

class PrimitiveBlock : public ::google::protobuf::Message {
 public:
  PrimitiveBlock();
  virtual ~PrimitiveBlock();
  
  PrimitiveBlock(const PrimitiveBlock& from);
  
  inline PrimitiveBlock& operator=(const PrimitiveBlock& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrimitiveBlock& default_instance();
  
  void Swap(PrimitiveBlock* other);
  
  // implements Message ----------------------------------------------
  
  PrimitiveBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrimitiveBlock& from);
  void MergeFrom(const PrimitiveBlock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .StringTable stringtable = 1;
  inline bool has_stringtable() const;
  inline void clear_stringtable();
  static const int kStringtableFieldNumber = 1;
  inline const ::StringTable& stringtable() const;
  inline ::StringTable* mutable_stringtable();
  
  // repeated .PrimitiveGroup primitivegroup = 2;
  inline int primitivegroup_size() const;
  inline void clear_primitivegroup();
  static const int kPrimitivegroupFieldNumber = 2;
  inline const ::PrimitiveGroup& primitivegroup(int index) const;
  inline ::PrimitiveGroup* mutable_primitivegroup(int index);
  inline ::PrimitiveGroup* add_primitivegroup();
  inline const ::google::protobuf::RepeatedPtrField< ::PrimitiveGroup >&
      primitivegroup() const;
  inline ::google::protobuf::RepeatedPtrField< ::PrimitiveGroup >*
      mutable_primitivegroup();
  
  // optional int32 granularity = 17 [default = 100];
  inline bool has_granularity() const;
  inline void clear_granularity();
  static const int kGranularityFieldNumber = 17;
  inline ::google::protobuf::int32 granularity() const;
  inline void set_granularity(::google::protobuf::int32 value);
  
  // optional int32 date_granularity = 18 [default = 1000];
  inline bool has_date_granularity() const;
  inline void clear_date_granularity();
  static const int kDateGranularityFieldNumber = 18;
  inline ::google::protobuf::int32 date_granularity() const;
  inline void set_date_granularity(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:PrimitiveBlock)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::StringTable* stringtable_;
  ::google::protobuf::RepeatedPtrField< ::PrimitiveGroup > primitivegroup_;
  ::google::protobuf::int32 granularity_;
  ::google::protobuf::int32 date_granularity_;
  friend void  protobuf_AddDesc_osmformat_2eproto();
  friend void protobuf_AssignDesc_osmformat_2eproto();
  friend void protobuf_ShutdownFile_osmformat_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PrimitiveBlock* default_instance_;
};
// -------------------------------------------------------------------

class HeaderBlock : public ::google::protobuf::Message {
 public:
  HeaderBlock();
  virtual ~HeaderBlock();
  
  HeaderBlock(const HeaderBlock& from);
  
  inline HeaderBlock& operator=(const HeaderBlock& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HeaderBlock& default_instance();
  
  void Swap(HeaderBlock* other);
  
  // implements Message ----------------------------------------------
  
  HeaderBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeaderBlock& from);
  void MergeFrom(const HeaderBlock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .BBox bbox = 1;
  inline bool has_bbox() const;
  inline void clear_bbox();
  static const int kBboxFieldNumber = 1;
  inline const ::BBox& bbox() const;
  inline ::BBox* mutable_bbox();
  
  // @@protoc_insertion_point(class_scope:HeaderBlock)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::BBox* bbox_;
  friend void  protobuf_AddDesc_osmformat_2eproto();
  friend void protobuf_AssignDesc_osmformat_2eproto();
  friend void protobuf_ShutdownFile_osmformat_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static HeaderBlock* default_instance_;
};
// ===================================================================


// ===================================================================

// BBox

// required sint64 left = 1;
inline bool BBox::has_left() const {
  return _has_bit(0);
}
inline void BBox::clear_left() {
  left_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 BBox::left() const {
  return left_;
}
inline void BBox::set_left(::google::protobuf::int64 value) {
  _set_bit(0);
  left_ = value;
}

// required sint64 right = 2;
inline bool BBox::has_right() const {
  return _has_bit(1);
}
inline void BBox::clear_right() {
  right_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 BBox::right() const {
  return right_;
}
inline void BBox::set_right(::google::protobuf::int64 value) {
  _set_bit(1);
  right_ = value;
}

// required sint64 top = 3;
inline bool BBox::has_top() const {
  return _has_bit(2);
}
inline void BBox::clear_top() {
  top_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 BBox::top() const {
  return top_;
}
inline void BBox::set_top(::google::protobuf::int64 value) {
  _set_bit(2);
  top_ = value;
}

// required sint64 bottom = 4;
inline bool BBox::has_bottom() const {
  return _has_bit(3);
}
inline void BBox::clear_bottom() {
  bottom_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 BBox::bottom() const {
  return bottom_;
}
inline void BBox::set_bottom(::google::protobuf::int64 value) {
  _set_bit(3);
  bottom_ = value;
}

// -------------------------------------------------------------------

// StringTable

// repeated bytes s = 1;
inline int StringTable::s_size() const {
  return s_.size();
}
inline void StringTable::clear_s() {
  s_.Clear();
}
inline const ::std::string& StringTable::s(int index) const {
  return s_.Get(index);
}
inline ::std::string* StringTable::mutable_s(int index) {
  return s_.Mutable(index);
}
inline void StringTable::set_s(int index, const ::std::string& value) {
  s_.Mutable(index)->assign(value);
}
inline void StringTable::set_s(int index, const char* value) {
  s_.Mutable(index)->assign(value);
}
inline void StringTable::set_s(int index, const void* value, size_t size) {
  s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StringTable::add_s() {
  return s_.Add();
}
inline void StringTable::add_s(const ::std::string& value) {
  s_.Add()->assign(value);
}
inline void StringTable::add_s(const char* value) {
  s_.Add()->assign(value);
}
inline void StringTable::add_s(const void* value, size_t size) {
  s_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StringTable::s() const {
  return s_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StringTable::mutable_s() {
  return &s_;
}

// -------------------------------------------------------------------

// Info

// optional int32 version = 1 [default = -1];
inline bool Info::has_version() const {
  return _has_bit(0);
}
inline void Info::clear_version() {
  version_ = -1;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Info::version() const {
  return version_;
}
inline void Info::set_version(::google::protobuf::int32 value) {
  _set_bit(0);
  version_ = value;
}

// optional int32 timestamp = 2;
inline bool Info::has_timestamp() const {
  return _has_bit(1);
}
inline void Info::clear_timestamp() {
  timestamp_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 Info::timestamp() const {
  return timestamp_;
}
inline void Info::set_timestamp(::google::protobuf::int32 value) {
  _set_bit(1);
  timestamp_ = value;
}

// optional int64 changeset = 3;
inline bool Info::has_changeset() const {
  return _has_bit(2);
}
inline void Info::clear_changeset() {
  changeset_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 Info::changeset() const {
  return changeset_;
}
inline void Info::set_changeset(::google::protobuf::int64 value) {
  _set_bit(2);
  changeset_ = value;
}

// optional int32 uid = 4;
inline bool Info::has_uid() const {
  return _has_bit(3);
}
inline void Info::clear_uid() {
  uid_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 Info::uid() const {
  return uid_;
}
inline void Info::set_uid(::google::protobuf::int32 value) {
  _set_bit(3);
  uid_ = value;
}

// optional int32 user_sid = 5;
inline bool Info::has_user_sid() const {
  return _has_bit(4);
}
inline void Info::clear_user_sid() {
  user_sid_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 Info::user_sid() const {
  return user_sid_;
}
inline void Info::set_user_sid(::google::protobuf::int32 value) {
  _set_bit(4);
  user_sid_ = value;
}

// -------------------------------------------------------------------

// ChangeSet

// required int64 id = 1;
inline bool ChangeSet::has_id() const {
  return _has_bit(0);
}
inline void ChangeSet::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 ChangeSet::id() const {
  return id_;
}
inline void ChangeSet::set_id(::google::protobuf::int64 value) {
  _set_bit(0);
  id_ = value;
}

// repeated uint32 keys = 2 [packed = true];
inline int ChangeSet::keys_size() const {
  return keys_.size();
}
inline void ChangeSet::clear_keys() {
  keys_.Clear();
}
inline ::google::protobuf::uint32 ChangeSet::keys(int index) const {
  return keys_.Get(index);
}
inline void ChangeSet::set_keys(int index, ::google::protobuf::uint32 value) {
  keys_.Set(index, value);
}
inline void ChangeSet::add_keys(::google::protobuf::uint32 value) {
  keys_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChangeSet::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChangeSet::mutable_keys() {
  return &keys_;
}

// repeated uint32 vals = 3 [packed = true];
inline int ChangeSet::vals_size() const {
  return vals_.size();
}
inline void ChangeSet::clear_vals() {
  vals_.Clear();
}
inline ::google::protobuf::uint32 ChangeSet::vals(int index) const {
  return vals_.Get(index);
}
inline void ChangeSet::set_vals(int index, ::google::protobuf::uint32 value) {
  vals_.Set(index, value);
}
inline void ChangeSet::add_vals(::google::protobuf::uint32 value) {
  vals_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChangeSet::vals() const {
  return vals_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChangeSet::mutable_vals() {
  return &vals_;
}

// optional .Info info = 4;
inline bool ChangeSet::has_info() const {
  return _has_bit(3);
}
inline void ChangeSet::clear_info() {
  if (info_ != NULL) info_->::Info::Clear();
  _clear_bit(3);
}
inline const ::Info& ChangeSet::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Info* ChangeSet::mutable_info() {
  _set_bit(3);
  if (info_ == NULL) info_ = new ::Info;
  return info_;
}

// required int32 created_at = 8;
inline bool ChangeSet::has_created_at() const {
  return _has_bit(4);
}
inline void ChangeSet::clear_created_at() {
  created_at_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 ChangeSet::created_at() const {
  return created_at_;
}
inline void ChangeSet::set_created_at(::google::protobuf::int32 value) {
  _set_bit(4);
  created_at_ = value;
}

// optional int32 closetime_delta = 9;
inline bool ChangeSet::has_closetime_delta() const {
  return _has_bit(5);
}
inline void ChangeSet::clear_closetime_delta() {
  closetime_delta_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 ChangeSet::closetime_delta() const {
  return closetime_delta_;
}
inline void ChangeSet::set_closetime_delta(::google::protobuf::int32 value) {
  _set_bit(5);
  closetime_delta_ = value;
}

// required bool open = 10;
inline bool ChangeSet::has_open() const {
  return _has_bit(6);
}
inline void ChangeSet::clear_open() {
  open_ = false;
  _clear_bit(6);
}
inline bool ChangeSet::open() const {
  return open_;
}
inline void ChangeSet::set_open(bool value) {
  _set_bit(6);
  open_ = value;
}

// optional .BBox bbox = 11;
inline bool ChangeSet::has_bbox() const {
  return _has_bit(7);
}
inline void ChangeSet::clear_bbox() {
  if (bbox_ != NULL) bbox_->::BBox::Clear();
  _clear_bit(7);
}
inline const ::BBox& ChangeSet::bbox() const {
  return bbox_ != NULL ? *bbox_ : *default_instance_->bbox_;
}
inline ::BBox* ChangeSet::mutable_bbox() {
  _set_bit(7);
  if (bbox_ == NULL) bbox_ = new ::BBox;
  return bbox_;
}

// -------------------------------------------------------------------

// Node

// required sint64 id = 1;
inline bool Node::has_id() const {
  return _has_bit(0);
}
inline void Node::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Node::id() const {
  return id_;
}
inline void Node::set_id(::google::protobuf::int64 value) {
  _set_bit(0);
  id_ = value;
}

// repeated uint32 keys = 2 [packed = true];
inline int Node::keys_size() const {
  return keys_.size();
}
inline void Node::clear_keys() {
  keys_.Clear();
}
inline ::google::protobuf::uint32 Node::keys(int index) const {
  return keys_.Get(index);
}
inline void Node::set_keys(int index, ::google::protobuf::uint32 value) {
  keys_.Set(index, value);
}
inline void Node::add_keys(::google::protobuf::uint32 value) {
  keys_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Node::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Node::mutable_keys() {
  return &keys_;
}

// repeated uint32 vals = 3 [packed = true];
inline int Node::vals_size() const {
  return vals_.size();
}
inline void Node::clear_vals() {
  vals_.Clear();
}
inline ::google::protobuf::uint32 Node::vals(int index) const {
  return vals_.Get(index);
}
inline void Node::set_vals(int index, ::google::protobuf::uint32 value) {
  vals_.Set(index, value);
}
inline void Node::add_vals(::google::protobuf::uint32 value) {
  vals_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Node::vals() const {
  return vals_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Node::mutable_vals() {
  return &vals_;
}

// optional .Info info = 4;
inline bool Node::has_info() const {
  return _has_bit(3);
}
inline void Node::clear_info() {
  if (info_ != NULL) info_->::Info::Clear();
  _clear_bit(3);
}
inline const ::Info& Node::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Info* Node::mutable_info() {
  _set_bit(3);
  if (info_ == NULL) info_ = new ::Info;
  return info_;
}

// required sint64 lat = 8;
inline bool Node::has_lat() const {
  return _has_bit(4);
}
inline void Node::clear_lat() {
  lat_ = GOOGLE_LONGLONG(0);
  _clear_bit(4);
}
inline ::google::protobuf::int64 Node::lat() const {
  return lat_;
}
inline void Node::set_lat(::google::protobuf::int64 value) {
  _set_bit(4);
  lat_ = value;
}

// required sint64 lon = 9;
inline bool Node::has_lon() const {
  return _has_bit(5);
}
inline void Node::clear_lon() {
  lon_ = GOOGLE_LONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::int64 Node::lon() const {
  return lon_;
}
inline void Node::set_lon(::google::protobuf::int64 value) {
  _set_bit(5);
  lon_ = value;
}

// -------------------------------------------------------------------

// DenseNodes

// repeated sint64 id = 1 [packed = true];
inline int DenseNodes::id_size() const {
  return id_.size();
}
inline void DenseNodes::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int64 DenseNodes::id(int index) const {
  return id_.Get(index);
}
inline void DenseNodes::set_id(int index, ::google::protobuf::int64 value) {
  id_.Set(index, value);
}
inline void DenseNodes::add_id(::google::protobuf::int64 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DenseNodes::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DenseNodes::mutable_id() {
  return &id_;
}

// repeated .Info info = 4;
inline int DenseNodes::info_size() const {
  return info_.size();
}
inline void DenseNodes::clear_info() {
  info_.Clear();
}
inline const ::Info& DenseNodes::info(int index) const {
  return info_.Get(index);
}
inline ::Info* DenseNodes::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::Info* DenseNodes::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Info >&
DenseNodes::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::Info >*
DenseNodes::mutable_info() {
  return &info_;
}

// repeated sint64 lat = 8 [packed = true];
inline int DenseNodes::lat_size() const {
  return lat_.size();
}
inline void DenseNodes::clear_lat() {
  lat_.Clear();
}
inline ::google::protobuf::int64 DenseNodes::lat(int index) const {
  return lat_.Get(index);
}
inline void DenseNodes::set_lat(int index, ::google::protobuf::int64 value) {
  lat_.Set(index, value);
}
inline void DenseNodes::add_lat(::google::protobuf::int64 value) {
  lat_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DenseNodes::lat() const {
  return lat_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DenseNodes::mutable_lat() {
  return &lat_;
}

// repeated sint64 lon = 9 [packed = true];
inline int DenseNodes::lon_size() const {
  return lon_.size();
}
inline void DenseNodes::clear_lon() {
  lon_.Clear();
}
inline ::google::protobuf::int64 DenseNodes::lon(int index) const {
  return lon_.Get(index);
}
inline void DenseNodes::set_lon(int index, ::google::protobuf::int64 value) {
  lon_.Set(index, value);
}
inline void DenseNodes::add_lon(::google::protobuf::int64 value) {
  lon_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DenseNodes::lon() const {
  return lon_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DenseNodes::mutable_lon() {
  return &lon_;
}

// -------------------------------------------------------------------

// Way

// required int64 id = 1;
inline bool Way::has_id() const {
  return _has_bit(0);
}
inline void Way::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Way::id() const {
  return id_;
}
inline void Way::set_id(::google::protobuf::int64 value) {
  _set_bit(0);
  id_ = value;
}

// repeated uint32 keys = 2 [packed = true];
inline int Way::keys_size() const {
  return keys_.size();
}
inline void Way::clear_keys() {
  keys_.Clear();
}
inline ::google::protobuf::uint32 Way::keys(int index) const {
  return keys_.Get(index);
}
inline void Way::set_keys(int index, ::google::protobuf::uint32 value) {
  keys_.Set(index, value);
}
inline void Way::add_keys(::google::protobuf::uint32 value) {
  keys_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Way::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Way::mutable_keys() {
  return &keys_;
}

// repeated uint32 vals = 3 [packed = true];
inline int Way::vals_size() const {
  return vals_.size();
}
inline void Way::clear_vals() {
  vals_.Clear();
}
inline ::google::protobuf::uint32 Way::vals(int index) const {
  return vals_.Get(index);
}
inline void Way::set_vals(int index, ::google::protobuf::uint32 value) {
  vals_.Set(index, value);
}
inline void Way::add_vals(::google::protobuf::uint32 value) {
  vals_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Way::vals() const {
  return vals_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Way::mutable_vals() {
  return &vals_;
}

// optional .Info info = 4;
inline bool Way::has_info() const {
  return _has_bit(3);
}
inline void Way::clear_info() {
  if (info_ != NULL) info_->::Info::Clear();
  _clear_bit(3);
}
inline const ::Info& Way::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Info* Way::mutable_info() {
  _set_bit(3);
  if (info_ == NULL) info_ = new ::Info;
  return info_;
}

// repeated sint64 refs = 8 [packed = true];
inline int Way::refs_size() const {
  return refs_.size();
}
inline void Way::clear_refs() {
  refs_.Clear();
}
inline ::google::protobuf::int64 Way::refs(int index) const {
  return refs_.Get(index);
}
inline void Way::set_refs(int index, ::google::protobuf::int64 value) {
  refs_.Set(index, value);
}
inline void Way::add_refs(::google::protobuf::int64 value) {
  refs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Way::refs() const {
  return refs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Way::mutable_refs() {
  return &refs_;
}

// -------------------------------------------------------------------

// Relation

// required int64 id = 1;
inline bool Relation::has_id() const {
  return _has_bit(0);
}
inline void Relation::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Relation::id() const {
  return id_;
}
inline void Relation::set_id(::google::protobuf::int64 value) {
  _set_bit(0);
  id_ = value;
}

// repeated uint32 keys = 2 [packed = true];
inline int Relation::keys_size() const {
  return keys_.size();
}
inline void Relation::clear_keys() {
  keys_.Clear();
}
inline ::google::protobuf::uint32 Relation::keys(int index) const {
  return keys_.Get(index);
}
inline void Relation::set_keys(int index, ::google::protobuf::uint32 value) {
  keys_.Set(index, value);
}
inline void Relation::add_keys(::google::protobuf::uint32 value) {
  keys_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Relation::keys() const {
  return keys_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Relation::mutable_keys() {
  return &keys_;
}

// repeated uint32 vals = 3 [packed = true];
inline int Relation::vals_size() const {
  return vals_.size();
}
inline void Relation::clear_vals() {
  vals_.Clear();
}
inline ::google::protobuf::uint32 Relation::vals(int index) const {
  return vals_.Get(index);
}
inline void Relation::set_vals(int index, ::google::protobuf::uint32 value) {
  vals_.Set(index, value);
}
inline void Relation::add_vals(::google::protobuf::uint32 value) {
  vals_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Relation::vals() const {
  return vals_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Relation::mutable_vals() {
  return &vals_;
}

// optional .Info info = 4;
inline bool Relation::has_info() const {
  return _has_bit(3);
}
inline void Relation::clear_info() {
  if (info_ != NULL) info_->::Info::Clear();
  _clear_bit(3);
}
inline const ::Info& Relation::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Info* Relation::mutable_info() {
  _set_bit(3);
  if (info_ == NULL) info_ = new ::Info;
  return info_;
}

// repeated int32 roles_sid = 8 [packed = true];
inline int Relation::roles_sid_size() const {
  return roles_sid_.size();
}
inline void Relation::clear_roles_sid() {
  roles_sid_.Clear();
}
inline ::google::protobuf::int32 Relation::roles_sid(int index) const {
  return roles_sid_.Get(index);
}
inline void Relation::set_roles_sid(int index, ::google::protobuf::int32 value) {
  roles_sid_.Set(index, value);
}
inline void Relation::add_roles_sid(::google::protobuf::int32 value) {
  roles_sid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Relation::roles_sid() const {
  return roles_sid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Relation::mutable_roles_sid() {
  return &roles_sid_;
}

// repeated sint64 memids = 9 [packed = true];
inline int Relation::memids_size() const {
  return memids_.size();
}
inline void Relation::clear_memids() {
  memids_.Clear();
}
inline ::google::protobuf::int64 Relation::memids(int index) const {
  return memids_.Get(index);
}
inline void Relation::set_memids(int index, ::google::protobuf::int64 value) {
  memids_.Set(index, value);
}
inline void Relation::add_memids(::google::protobuf::int64 value) {
  memids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Relation::memids() const {
  return memids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Relation::mutable_memids() {
  return &memids_;
}

// repeated .Relation.MemberType types = 10 [packed = true];
inline int Relation::types_size() const {
  return types_.size();
}
inline void Relation::clear_types() {
  types_.Clear();
}
inline ::Relation_MemberType Relation::types(int index) const {
  return static_cast< ::Relation_MemberType >(types_.Get(index));
}
inline void Relation::set_types(int index, ::Relation_MemberType value) {
  GOOGLE_DCHECK(::Relation_MemberType_IsValid(value));
  types_.Set(index, value);
}
inline void Relation::add_types(::Relation_MemberType value) {
  GOOGLE_DCHECK(::Relation_MemberType_IsValid(value));
  types_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
Relation::types() const {
  return types_;
}
inline ::google::protobuf::RepeatedField<int>*
Relation::mutable_types() {
  return &types_;
}

// -------------------------------------------------------------------

// PrimitiveGroup

// repeated .Node nodes = 1;
inline int PrimitiveGroup::nodes_size() const {
  return nodes_.size();
}
inline void PrimitiveGroup::clear_nodes() {
  nodes_.Clear();
}
inline const ::Node& PrimitiveGroup::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::Node* PrimitiveGroup::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::Node* PrimitiveGroup::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Node >&
PrimitiveGroup::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Node >*
PrimitiveGroup::mutable_nodes() {
  return &nodes_;
}

// optional .DenseNodes dense = 2;
inline bool PrimitiveGroup::has_dense() const {
  return _has_bit(1);
}
inline void PrimitiveGroup::clear_dense() {
  if (dense_ != NULL) dense_->::DenseNodes::Clear();
  _clear_bit(1);
}
inline const ::DenseNodes& PrimitiveGroup::dense() const {
  return dense_ != NULL ? *dense_ : *default_instance_->dense_;
}
inline ::DenseNodes* PrimitiveGroup::mutable_dense() {
  _set_bit(1);
  if (dense_ == NULL) dense_ = new ::DenseNodes;
  return dense_;
}

// repeated .Way ways = 3;
inline int PrimitiveGroup::ways_size() const {
  return ways_.size();
}
inline void PrimitiveGroup::clear_ways() {
  ways_.Clear();
}
inline const ::Way& PrimitiveGroup::ways(int index) const {
  return ways_.Get(index);
}
inline ::Way* PrimitiveGroup::mutable_ways(int index) {
  return ways_.Mutable(index);
}
inline ::Way* PrimitiveGroup::add_ways() {
  return ways_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Way >&
PrimitiveGroup::ways() const {
  return ways_;
}
inline ::google::protobuf::RepeatedPtrField< ::Way >*
PrimitiveGroup::mutable_ways() {
  return &ways_;
}

// repeated .Relation relations = 4;
inline int PrimitiveGroup::relations_size() const {
  return relations_.size();
}
inline void PrimitiveGroup::clear_relations() {
  relations_.Clear();
}
inline const ::Relation& PrimitiveGroup::relations(int index) const {
  return relations_.Get(index);
}
inline ::Relation* PrimitiveGroup::mutable_relations(int index) {
  return relations_.Mutable(index);
}
inline ::Relation* PrimitiveGroup::add_relations() {
  return relations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Relation >&
PrimitiveGroup::relations() const {
  return relations_;
}
inline ::google::protobuf::RepeatedPtrField< ::Relation >*
PrimitiveGroup::mutable_relations() {
  return &relations_;
}

// repeated .ChangeSet changesets = 5;
inline int PrimitiveGroup::changesets_size() const {
  return changesets_.size();
}
inline void PrimitiveGroup::clear_changesets() {
  changesets_.Clear();
}
inline const ::ChangeSet& PrimitiveGroup::changesets(int index) const {
  return changesets_.Get(index);
}
inline ::ChangeSet* PrimitiveGroup::mutable_changesets(int index) {
  return changesets_.Mutable(index);
}
inline ::ChangeSet* PrimitiveGroup::add_changesets() {
  return changesets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ChangeSet >&
PrimitiveGroup::changesets() const {
  return changesets_;
}
inline ::google::protobuf::RepeatedPtrField< ::ChangeSet >*
PrimitiveGroup::mutable_changesets() {
  return &changesets_;
}

// -------------------------------------------------------------------

// PrimitiveBlock

// required .StringTable stringtable = 1;
inline bool PrimitiveBlock::has_stringtable() const {
  return _has_bit(0);
}
inline void PrimitiveBlock::clear_stringtable() {
  if (stringtable_ != NULL) stringtable_->::StringTable::Clear();
  _clear_bit(0);
}
inline const ::StringTable& PrimitiveBlock::stringtable() const {
  return stringtable_ != NULL ? *stringtable_ : *default_instance_->stringtable_;
}
inline ::StringTable* PrimitiveBlock::mutable_stringtable() {
  _set_bit(0);
  if (stringtable_ == NULL) stringtable_ = new ::StringTable;
  return stringtable_;
}

// repeated .PrimitiveGroup primitivegroup = 2;
inline int PrimitiveBlock::primitivegroup_size() const {
  return primitivegroup_.size();
}
inline void PrimitiveBlock::clear_primitivegroup() {
  primitivegroup_.Clear();
}
inline const ::PrimitiveGroup& PrimitiveBlock::primitivegroup(int index) const {
  return primitivegroup_.Get(index);
}
inline ::PrimitiveGroup* PrimitiveBlock::mutable_primitivegroup(int index) {
  return primitivegroup_.Mutable(index);
}
inline ::PrimitiveGroup* PrimitiveBlock::add_primitivegroup() {
  return primitivegroup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PrimitiveGroup >&
PrimitiveBlock::primitivegroup() const {
  return primitivegroup_;
}
inline ::google::protobuf::RepeatedPtrField< ::PrimitiveGroup >*
PrimitiveBlock::mutable_primitivegroup() {
  return &primitivegroup_;
}

// optional int32 granularity = 17 [default = 100];
inline bool PrimitiveBlock::has_granularity() const {
  return _has_bit(2);
}
inline void PrimitiveBlock::clear_granularity() {
  granularity_ = 100;
  _clear_bit(2);
}
inline ::google::protobuf::int32 PrimitiveBlock::granularity() const {
  return granularity_;
}
inline void PrimitiveBlock::set_granularity(::google::protobuf::int32 value) {
  _set_bit(2);
  granularity_ = value;
}

// optional int32 date_granularity = 18 [default = 1000];
inline bool PrimitiveBlock::has_date_granularity() const {
  return _has_bit(3);
}
inline void PrimitiveBlock::clear_date_granularity() {
  date_granularity_ = 1000;
  _clear_bit(3);
}
inline ::google::protobuf::int32 PrimitiveBlock::date_granularity() const {
  return date_granularity_;
}
inline void PrimitiveBlock::set_date_granularity(::google::protobuf::int32 value) {
  _set_bit(3);
  date_granularity_ = value;
}

// -------------------------------------------------------------------

// HeaderBlock

// required .BBox bbox = 1;
inline bool HeaderBlock::has_bbox() const {
  return _has_bit(0);
}
inline void HeaderBlock::clear_bbox() {
  if (bbox_ != NULL) bbox_->::BBox::Clear();
  _clear_bit(0);
}
inline const ::BBox& HeaderBlock::bbox() const {
  return bbox_ != NULL ? *bbox_ : *default_instance_->bbox_;
}
inline ::BBox* HeaderBlock::mutable_bbox() {
  _set_bit(0);
  if (bbox_ == NULL) bbox_ = new ::BBox;
  return bbox_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Relation_MemberType>() {
  return ::Relation_MemberType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_osmformat_2eproto__INCLUDED
